from sqlite3 import connect
from pathlib import Path
from functools import wraps
import pandas as pd

db_path = Path(__file__).parent.absolute() / "employee_events.db"


class QueryMixin:


    def pandas_query(self, sql_query):
        """
        Execute a SQL query and return the result as a pandas DataFrame.

        Args:
            sql_query (str): A valid SQL query string

        Returns:
            pandas.DataFrame: The result of the query as a pandas DataFrame
        """
        connection = connect(db_path)
        result = pd.read_sql_query(sql_query, connection)
        connection.close()
        return result


    def query(self, sql_query):
        """
        Execute a SQL query and return the result as a list of tuples.

        Args:
            sql_query (str): A valid SQL query string

        Returns:
            list: A list of tuples, representing the result of the query
        """
        connection = connect(db_path)
        cursor = connection.cursor()
        result = cursor.execute(sql_query).fetchall()
        connection.close()
        return result


def query(func):
    """
    Decorator that runs a standard sql execution
    and returns a list of tuples
    """

    @wraps(func)
    def run_query(*args, **kwargs):
        """
        Executes a SQL query generated by the decorated function and returns the result.

        This function acts as a decorator, executing the SQL query string returned
        by the decorated function. It retrieves the query result as a list of tuples
        using an SQLite3 cursor.

        Args:
            *args: Positional arguments passed to the decorated function.
            **kwargs: Keyword arguments passed to the decorated function.

        Returns:
            list: A list of tuples representing the result of the SQL query.
        """

        query_string = func(*args, **kwargs)
        connection = connect(db_path)
        cursor = connection.cursor()
        result = cursor.execute(query_string).fetchall()
        connection.close()
        return result

    return run_query